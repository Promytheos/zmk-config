/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT    0
#define GAMING     1
#define NUMBER     2
#define FUNCTION   3

&mt {
  flavor = "tap-preferred";
};

&caps_word {
  continue-list = <UNDERSCORE MINUS>;
}; 

/ {
  behaviors {
    bspc_del: backspace_delete {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp BACKSPACE>, <&kp DELETE>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
      keep-mods = <(MOD_RSFT)>;
    };
  };
};

/ {
  combos {
    compatible = "zmk,combos";
    combo_caps_word {
      timeout-ms = <50>;
      key-positions = <16 19>;
      bindings = <&caps_word>;
      layers = <DEFAULT>;
    };

    combo_reset {
      timeout-ms = <50>;
      key-positions = <38 39>;
      bindings = <&sys_reset>;
    };

    combo_bootloader {
      timeout-ms = <50>;
      key-positions = <16 19 38 39>;
      bindings = <&bootloader>;
    };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp ESC      &kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y       &kp U         &kp I          &kp O        &kp P           &kp MINUS
        &kp TAB      &mt LGUI A   &mt LALT S   &mt LSHFT D   &mt LCTRL F   &kp G        &kp H       &mt RCTRL J   &mt RSHFT K    &mt RALT L   &mt RGUI SEMI   &kp SQT 
        &to GAMING   &kp Z        &kp X        &kp C         &kp V         &kp B        &kp N       &kp M         &kp COMMA      &kp DOT      &kp FSLH        &kp BSLH
                                               &mo FUNCTION  &mo NUMBER    &kp RET      &kp SPACE   &bspc_del     &none
      >;
    };

    gaming_layer {
      bindings = <
        &kp ESC     &kp Q   &kp W   &kp E       &kp R      &kp T          &kp Y     &kp U      &kp I       &kp O     &kp P      &kp MINUS
        &kp TAB     &kp A   &kp S   &kp D       &kp F      &kp G          &kp H     &kp J      &kp K       &kp L     &kp SEMI   &kp SQT
        &kp LSHFT   &kp Z   &kp X   &kp C       &kp V      &kp B          &kp N     &kp M      &kp COMMA   &kp DOT   &kp FSLH   &to DEFAULT
                                    &kp LCTRL   &kp LALT   &kp SPACE      &kp RET   &kp RGUI   &mo FUNCTION
      >;
    };

    number_layer {
      bindings = <
        &kp GRAVE  &none        &none        &none         &none         &none           &none       &none         &none         &kp LBKT     &kp RBKT     &kp MINUS
        &kp TAB    &mt LGUI N1  &mt LALT N2  &mt LSHFT N3  &mt LCTRL N4  &kp N5          &kp N6      &mt RCTRL N7  &mt RSHFT N8  &mt RALT N9  &mt RGUI N0  &kp EQUAL
        &none      &none        &none        &none         &none         &none           &none       &none         &kp COMMA     &kp DOT      &kp FSLH     &kp BSLH
                                             &none         &none         &kp RET         &kp SPACE   &bspc_del     &mo FUNCTION
      >;
    };

    fn_layer {
      bindings = <
        &none  &kp F1    &kp F2    &kp F3    &kp F4       &none             &kp C_PREV  &kp C_PP    &kp C_NEXT   &kp C_MUTE        &kp C_VOL_DN  &kp C_VOL_UP
        &none  &kp F5    &kp F6    &kp F7    &kp F8       &none             &kp LEFT    &kp DOWN    &kp UP       &kp RIGHT         &none         &none
        &none  &kp F9    &kp F10   &kp F11   &kp F12      &none             &bt BT_PRV  &bt BT_NXT  &bt BT_CLR   &bt BT_CLR_ALL    &none         &none
                                   &none     &none        &none             &none       &none       &out OUT_TOG
      >;
    };
  };
};
