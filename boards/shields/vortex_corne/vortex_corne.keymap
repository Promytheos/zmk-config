/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT    0
#define GAMING     1
#define NUMBER     2
#define SYMBOL     3
#define FUNCTION   4

&mt {
  flavor = "tap-preferred";
};

/ {
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };
};
/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  -  |
// | TAB  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '  |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  \  |
//                    | SYM | NUM | ENT |   | SPC | BKSPC  | FN |
                        bindings = <
   &kp ESC      &kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y       &kp U         &kp I          &kp O        &kp P           &kp MINUS
   &kp TAB      &mt LGUI A   &mt LALT S   &mt LSHFT D   &mt LCTRL F   &kp G        &kp H       &mt RCTRL J   &mt RSHFT K    &mt RALT L   &mt RGUI SEMI   &kp SQT 
   &to GAMING   &kp Z        &kp X        &kp C         &kp V         &kp B        &kp N       &kp M         &kp COMMA      &kp DOT      &kp FSLH        &kp BSLH
                                          &mo SYMBOL    &mo NUMBER    &kp RET      &kp SPACE   &bspc_del     &mo FUNCTION
                        >;
                };

                gaming_layer {
// -----------------------------------------------------------------------------------------
// | ESC  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  |  -  |
// | TAB  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |  '  |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |  \  |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &kp ESC     &kp Q   &kp W   &kp E       &kp R      &kp T        &kp Y       &kp U      &kp I       &kp O     &kp P      &kp MINUS
   &kp TAB     &kp A   &kp S   &kp D       &kp F      &kp G        &kp H       &kp J      &kp K       &kp L     &kp SEMI   &kp SQT
   &kp LSHFT   &kp Z   &kp X   &kp C       &kp V      &kp B        &kp N       &kp M      &kp COMMA   &kp DOT   &kp FSLH   &to DEFAULT
                               &kp LCTRL   &kp LALT   &kp RET      &kp SPACE   &kp RGUI   &mo FUNCTION
                        >;
                };

                number_layer {
// -----------------------------------------------------------------------------------------
// |     |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
// |     |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  =  |
// |     |     |     |     |     |     |   |     |     |     |     |     |     |
//                   |     |     |     |   |     |     |     |
                        bindings = <
   &kp GRAVE  &trans       &trans       &trans        &trans        &trans          &trans  &trans        &trans        &kp LBKT     &kp RBKT     &trans
   &trans     &mt LGUI N1  &mt LALT N2  &mt LSHFT N3  &mt LCTRL N4  &kp N5          &kp N6  &mt RCTRL N7  &mt RSHFT N8  &mt RALT N9  &mt RGUI N0  &kp EQUAL
   &trans     &trans       &trans       &trans        &trans        &trans          &trans  &trans        &trans        &trans       &trans       &trans
                                        &trans        &trans        &trans          &trans  &trans        &trans
                        >;
                };

                symbol_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  L  |  D  |  U  |  R  |  [  |  ]   |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp GRAVE   &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT      &kp CARET  &kp AMPS  &kp ASTRK  &kp LPAR   &kp RPAR  &trans
   &kp CAPS    &trans    &trans  &trans    &trans    &trans         &kp LEFT   &kp DOWN  &kp UP     &kp RIGHT  &kp LBKT  &kp RBKT
   &trans      &trans    &trans  &trans    &trans    &trans         &trans     &trans    &trans     &trans     &trans    &trans
                                &trans    &trans    &trans         &trans     &trans    &trans
                        >;
                };

                fn_layer {
// -----------------------------------------------------------------------------------------
// |  F1      |  F2   |  F3    | F4  | F5  | F6  |   | F7  | F8   | F9    | F10  | F11  | F12      |
// | BTCLR    | BT1   | BT2    | BT3 | BT4 | BT5 |   | LFT | DWN  | UP    | RGT  |      | VOL UP   |
// | BTCLRALL |       |        |     |     |     |   |     | PREV | PAUSE | NEXT | MUTE | VOL DOWN |
//                             |     |     | SPC |   | ENT |      | ALT   |
                        bindings = <
   &bt BT_PRV  &bt BT_NXT  &none   &none   &bt BT_CLR   &bt BT_CLR_ALL     &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP
   &kp F1      &kp F2      &kp F3  &kp F4  &kp F5       &kp F6             &kp F7      &kp F8    &kp F9      &kp F10     &kp F11       &kp F12
   &none       &none       &none   &none   &none        &none              &none       &none     &none       &none       &none         &none
                                   &none   &none        &none              &none       &none     &none
                        >;
                };

        };
};
